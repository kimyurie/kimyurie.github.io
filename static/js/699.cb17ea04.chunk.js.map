{"version":3,"file":"static/js/699.cb17ea04.chunk.js","mappings":"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","sources":["routes/detail.js"],"sourcesContent":["import { useContext, useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n// import styled from \"styled-components\";\r\nimport { Nav } from \"react-bootstrap\";\r\nimport { addItem } from \"../store/store\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\n// let YellowBtn = styled.button`\r\n//   background : ${props => props.bg};\r\n//   color :  ${props => props.bg == 'blue' ? 'white' : 'black'};\r\n//   padding : 10px;\r\n// `\r\n\r\n// let NewBtn = styled.button(YellowBtn)``\r\n\r\nfunction Detail(props){\r\n  let [count, setCount] = useState(0)\r\n  let [alert, setAlert] = useState(true)\r\n  let [num, setNum] = useState('') \r\n\r\n  // 탭 상태 저장해둘 state \r\n  let [탭, 탭변경] = useState(0) // 0이면 0번째 내용, 1이면 1번째, 2이면 2번째\r\n\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    // 컴포넌트 mount(페이지 장착), update 시 여기 코드 실행\r\n     // useEffect 안에 있는 코드는 html 렌더링 후에 동작한다 -> 더 효율적!\r\n     // useEffect 안에 적는 코드들?\r\n     // 어려운 연산 / 서버에서 데이터 가져오는 작업 / 타이머 장착하는 거 \r\n\r\n    // 타이머\r\n    let a = setTimeout(() => {setAlert(false)}, 2000)\r\n\r\n    return () => {\r\n      // 기존 타이머는 제거해주세요~\r\n      // 위 useEffect 동작 전에 실행됨\r\n      // mount 시 실행안되고 unmount시 실행됨\r\n      clearTimeout(a)}\r\n  }, []) // []는 useEffect 실행조건 넣을 수 있는 곳, mount 시 1회만 적용하게 하고 싶으면 빈괄호[]만 써주기\r\n\r\n  // ** useEffect 사용법\r\n  // useEffect(() => { 실행할 코드 }) //1. 재랜더링마다 코드 실행하고 싶으면\r\n  // useEffect(() => {실행할 코드}, []) //2. mount 시 1회 코드 실행하고 싶으면\r\n  // useEffect(() => {return() => {\r\n  //   실행할 코드\r\n  // }}, []) // 3. unmount시 1회 코드 실행하고 싶으면 (코드 실행 전 항상 실행)\r\n  // // 4. useEffect 실행 전에 뭔가 실행하려면 언제나 {} 안에 return() => {}\r\n  // useEffect(() => {실행할 코드}, [state1])// 5. 특정 state 변경시에만 실행\r\n\r\n\r\nuseEffect(() => {\r\n  if (isNaN(num) == true){\r\n    console.log('그러지마세요')\r\n  }}, [num])\r\n\r\n\r\n  let {id} = useParams(); // 현재 url의 파라미터 정보(/:id)\r\n  \r\n\r\n\r\n// .find() 사용\r\n// https://devinserengeti.tistory.com/20 참고\r\nlet 찾은상품 = props.shoes.find(function(x){\r\n  return x.id == id;\r\n});\r\n\r\nlet [fade2, setFade2] = useState('')\r\n\r\nuseEffect(() => {\r\n  setFade2('end')\r\n\r\n  return () => {\r\n    setFade2('')\r\n  }\r\n}, [])\r\n\r\n\r\nlet dispatch = useDispatch(); // store.js로 요청 보내주는 함수\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n // 누가 detail 페이지 접속하면\r\n useEffect(() => {\r\n  // 그 페이지에 보이는 상품id 가져와서\r\n  // localStorage에 watched 항목에 추가\r\n  let 꺼낸거 = localStorage.getItem('watched')\r\n  // JSON  -> array/object\r\n  꺼낸거 = JSON.parse(꺼낸거)\r\n  꺼낸거.push(찾은상품.id)\r\n  // 상품id가 이미 [ ]에 있으면 추가하지 말아주세요 (중복제거)\r\n  꺼낸거 = new Set(꺼낸거)\r\n  꺼낸거 = Array.from(꺼낸거) // set -> array 변환\r\n  // array/object -> JSON \r\n  localStorage.setItem('watched', JSON.stringify(꺼낸거));\r\n},[])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n      // <div className=\"container\">\r\n      //   <div className=\"row\">\r\n      //       <div className=\"col-md-6\">\r\n      //         <img src=\"https://codingapple1.github.io/shop/shoes1.jpg\" width=\"100%\" />\r\n      //         </div>\r\n      //         <div className=\"col-md-6\">\r\n      //         <h4 className=\"pt-5\">{props.shoes[id].title}</h4>\r\n      //         <p>{props.shoes[id].content}</p>\r\n      //         <p>{props.shoes[id].price}원</p>\r\n      //         <button className=\"btn btn-danger\">주문하기</button> \r\n      //       </div>\r\n      //   </div>\r\n      // </div> \r\n\r\n// Q. 자료의 순서가 변경되면 상세페이지도 고장나는 문제는 어떻게 해결할까요?\r\n//  현재 /:id 자리에 입력한 값과 영구번호가 같은 상품을 찾아서 데이터바인딩\r\n      <div className={'container start ' + fade2}>\r\n          {/* <YellowBtn bg = \"blue\">버튼</YellowBtn>\r\n          <YellowBtn bg = \"orange\">버튼</YellowBtn> */}\r\n\r\n\r\n          {/* 오늘의 숙제 :\r\nDetail 페이지 안에 노란 박스 하나 만들고\r\nDetail 페이지 방문 후 2초 후에 박스가 사라지게 해보십시오. */}\r\n        {\r\n           alert == true ? \r\n          <div className=\"alert alert-warning\">\r\n            2초 이내 구매시 할인</div>\r\n          : null\r\n        }\r\n\r\n\r\n        <div className=\"row\">\r\n          {count}\r\n          <button onClick={() => setCount(count +1)}>버튼</button>\r\n            <div className=\"col-md-6\">\r\n              <img src=\"https://codingapple1.github.io/shop/shoes1.jpg\" width=\"100%\" />\r\n              </div>\r\n\r\n\r\n              <div className=\"col-md-6\">\r\n              {/* 오늘의 숙제 : \r\n      <input> 하나 만들고 거기에 유저가 숫자 말고 다른걸 입력하면\r\n      \"그러지마세요\"라는 안내메세지를 출력해봅시다. */}\r\n              <input onChange={(e) => setNum(e.target.value)}></input>\r\n\r\n              <h4 className=\"pt-5\">{찾은상품.title}</h4>\r\n              <p>{찾은상품.content}</p>\r\n              <p>{찾은상품.price}원</p>\r\n              {/* 주문버튼누르면 state에 새로운 상품추가 */}\r\n              <button className=\"btn btn-danger\" onClick={() => {\r\n                  dispatch(addItem({ id: 1, name: \"Red Knit\", count: 1 }))\r\n              }}>주문하기</button> \r\n            </div>\r\n        </div>\r\n\r\n          {/* 탭 UI */}\r\n          <Nav variant=\"tabs\"  defaultActiveKey=\"link0\">\r\n              <Nav.Item>\r\n                <Nav.Link onClick ={() => 탭변경(0)} eventKey=\"link0\">버튼0</Nav.Link>\r\n              </Nav.Item>\r\n              <Nav.Item>\r\n                <Nav.Link onClick ={() => 탭변경(1)} eventKey=\"link1\">버튼1</Nav.Link>\r\n              </Nav.Item>\r\n              <Nav.Item>\r\n                <Nav.Link onClick ={() => 탭변경(2)} eventKey=\"link2\">버튼2</Nav.Link>\r\n              </Nav.Item>\r\n          </Nav>\r\n          <TabContent 탭 = {탭}/> \r\n      </div> \r\n    )\r\n  }\r\n\r\n\r\n\r\n\r\n  // function TabContent(props){ // props 대신 {탭}도 가능!\r\n  //   if (props.탭 == 0){\r\n  //     return <div>내용0</div>\r\n  //   }\r\n  //   if (props.탭 == 1){\r\n  //     return <div>내용1</div>\r\n  //   }\r\n  //   if (props.탭 == 2){\r\n  //     return <div>내용2</div> \r\n  //   }  \r\n  // } \r\n\r\n    \r\n  function TabContent({탭, shoes}){\r\n    // 탭 state가 변할 때 end 부착\r\n    let [fade, setFade] = useState('') \r\n\r\n    useEffect(() => {\r\n      // fade라는 state를 end로 바꿔주세요~\r\n      setTimeout(() => {setFade('end')}, 100) // 제렌더링 떄문에 위아래 시간차 둬야됌\r\n\r\n      return () => { // 위 useEffect 실행되기 전 수행\r\n        setFade('') // 탭 state가 변할 때 end 뗐다가 부착\r\n      }\r\n    }, [탭])\r\n    \r\n    return (<div className={'start ' + fade}> {/* 전환 애니메이션  */}\r\n     {/* 위와 같은 if문 대신 아래와 같이 array 자료형으로도 가능 */}\r\n      { [<div>내용0</div>, <div>내용1</div>, <div>내용2</div>][탭] }  {/* 탭 클릭에 따라 내용 바뀜 */}\r\n    </div>)\r\n  }\r\n\r\n// 오늘의 숙제 : \r\n// Detail 컴포넌트 로드시 투명도가 0에서 1로 서서히 증가하는 애니메이션을 주려면?\r\n\r\n \r\nexport default Detail;"],"names":["TabContent","_ref","탭","_useState11","shoes","useState","_useState12","_slicedToArray","fade","setFade","useEffect","setTimeout","_jsxs","className","children","_jsx","props","_useState","_useState2","count","setCount","_useState3","_useState4","alert","setAlert","_useState5","_useState6","num","setNum","_useState7","_useState8","탭변경","a","clearTimeout","isNaN","console","log","id","useParams","찾은상품","find","x","_useState9","_useState10","fade2","setFade2","dispatch","useDispatch","꺼낸거","localStorage","getItem","JSON","parse","push","Set","Array","from","setItem","stringify","onClick","src","width","onChange","e","target","value","title","content","price","addItem","name","Nav","variant","defaultActiveKey","Item","Link","eventKey"],"sourceRoot":""}