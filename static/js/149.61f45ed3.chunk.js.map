{"version":3,"file":"static/js/149.61f45ed3.chunk.js","mappings":"uTAmCA,EA/B2BA,EAAAA,YAAiB,SAAAC,EAWzCC,GAAQ,IAVTC,EAAQF,EAARE,SACAC,EAASH,EAATG,UACAC,EAAOJ,EAAPI,QACAC,EAAQL,EAARK,SACAC,EAAUN,EAAVM,WACAC,EAAKP,EAALO,MACAC,EAAIR,EAAJQ,KACAC,EAAOT,EAAPS,QACAC,EAAUV,EAAVU,WACGC,GAAKC,EAAAA,EAAAA,GAAAZ,EAAAa,GAEFC,GAAoBC,EAAAA,EAAAA,IAAmBb,EAAU,SACjDc,EAAUC,IAAWd,EAAWW,EAAmBL,GAAW,GAAJS,OAAOJ,EAAiB,KAAAI,OAAIT,GAAWD,GAAQ,GAAJU,OAAOJ,EAAiB,KAAAI,OAAIV,GAAQJ,GAAW,GAAJc,OAAOJ,EAAiB,KAAAI,OAAuB,kBAAZd,EAAuB,WAAHc,OAAcd,GAAY,WAAaC,GAAY,GAAJa,OAAOJ,EAAiB,aAAaR,GAAc,GAAJY,OAAOJ,EAAiB,eAAeP,GAAS,GAAJW,OAAOJ,EAAiB,WACzWK,GAAqBC,EAAAA,EAAAA,KAAK,SAAOC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAClCV,GAAK,IACRR,UAAWa,EACXf,IAAKA,KAEP,GAAIS,EAAY,CACd,IAAIY,EAAkB,GAAHJ,OAAMJ,EAAiB,eAI1C,MAH0B,kBAAfJ,IACTY,EAAkB,GAAHJ,OAAMI,EAAe,KAAAJ,OAAIR,KAEtBU,EAAAA,EAAAA,KAAK,MAAO,CAC9BjB,UAAWmB,EACXC,SAAUJ,GAEd,CACA,OAAOA,CACT,I,8BCyCA,MA9DA,WASE,IAAIK,GAAQC,EAAAA,EAAAA,KAAY,SAACD,GAAK,OAAKA,CAAK,IACpCE,GAAWC,EAAAA,EAAAA,MAGf,OACEC,EAAAA,EAAAA,MAAA,OAAAL,SAAA,EAGEK,EAAAA,EAAAA,MAAA,MAAAL,SAAA,CACGC,EAAMK,KAAKC,KAAK,IAAEN,EAAMK,KAAKE,IAAI,sCAEpCX,EAAAA,EAAAA,KAAA,UACEY,QAAS,WACPN,GAASO,EAAAA,EAAAA,IAAS,KACpB,EAAEV,SACH,kBAIDK,EAAAA,EAAAA,MAACM,EAAK,CAAAX,SAAA,EACJH,EAAAA,EAAAA,KAAA,SAAAG,UACEK,EAAAA,EAAAA,MAAA,MAAAL,SAAA,EACEH,EAAAA,EAAAA,KAAA,MAAAG,SAAI,OACJH,EAAAA,EAAAA,KAAA,MAAAG,SAAI,wBACJH,EAAAA,EAAAA,KAAA,MAAAG,SAAI,kBACJH,EAAAA,EAAAA,KAAA,MAAAG,SAAI,mCAGRH,EAAAA,EAAAA,KAAA,SAAAG,SACGC,EAAMW,KAAKC,KAAI,SAACC,EAAGC,GAAC,OACnBV,EAAAA,EAAAA,MAAA,MAAAL,SAAA,EACEH,EAAAA,EAAAA,KAAA,MAAAG,SAAKC,EAAMW,KAAKG,GAAGC,MACnBnB,EAAAA,EAAAA,KAAA,MAAAG,SAAKC,EAAMW,KAAKG,GAAGR,QACnBV,EAAAA,EAAAA,KAAA,MAAAG,SAAKC,EAAMW,KAAKG,GAAGE,SACnBpB,EAAAA,EAAAA,KAAA,MAAAG,SAAI,kBACJH,EAAAA,EAAAA,KAAA,MAAAG,UAIEH,EAAAA,EAAAA,KAAA,UACEY,QAAS,WACPN,GAASe,EAAAA,EAAAA,IAASjB,EAAMW,KAAKG,GAAGC,IAClC,EAAEhB,SACH,UAbIe,EAeJ,WAMjB,C","sources":["../node_modules/react-bootstrap/esm/Table.js","routes/Cart.js"],"sourcesContent":["import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Table = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  striped,\n  bordered,\n  borderless,\n  hover,\n  size,\n  variant,\n  responsive,\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'table');\n  const classes = classNames(className, decoratedBsPrefix, variant && `${decoratedBsPrefix}-${variant}`, size && `${decoratedBsPrefix}-${size}`, striped && `${decoratedBsPrefix}-${typeof striped === 'string' ? `striped-${striped}` : 'striped'}`, bordered && `${decoratedBsPrefix}-bordered`, borderless && `${decoratedBsPrefix}-borderless`, hover && `${decoratedBsPrefix}-hover`);\n  const table = /*#__PURE__*/_jsx(\"table\", {\n    ...props,\n    className: classes,\n    ref: ref\n  });\n  if (responsive) {\n    let responsiveClass = `${decoratedBsPrefix}-responsive`;\n    if (typeof responsive === 'string') {\n      responsiveClass = `${responsiveClass}-${responsive}`;\n    }\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: responsiveClass,\n      children: table\n    });\n  }\n  return table;\n});\nexport default Table;","import { Button, Table } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { changeName, increase } from \"../store/userSlice\";\r\nimport { addCount } from \"../store/store\";\r\nimport { memo, useState } from \"react\";\r\n\r\n//Redux 사용 시 컴포넌트들이 props 없이 state 공유 가능\r\n// 부모 자식간 props 전송 필요없어짐\r\n// 리덕스 사용하면 컴포넌트간 state 공유 편해짐\r\n\r\n// 컴포넌트 간 공유 필요 없으면 굳이 리덕스 안써도 되고\r\n// 그냥 useState() 쓰기\r\n\r\nfunction Cart() {\r\n\r\n\r\n\r\n\r\n  //  // Redux store의 state 꺼내는 법\r\n  // let a = useSelector((state) => {return state.user}) // 여기서 state는 store 안에 있던 모든 state가 된다\r\n  // console.log(a)\r\n\r\n  let state = useSelector((state) => state);\r\n  let dispatch = useDispatch(); // store.js로 요청 보내주는 함수\r\n\r\n\r\n  return (\r\n    <div>\r\n\r\n      {/* 버튼 누르면 age가 +1되는 기능 */}\r\n      <h6>\r\n        {state.user.name} {state.user.age}의 장바구니\r\n      </h6>\r\n      <button\r\n        onClick={() => {\r\n          dispatch(increase(100)); // 4. dispatch(state변경함수())\r\n        }}\r\n      >\r\n        버튼\r\n      </button>\r\n\r\n      <Table>\r\n        <thead>\r\n          <tr>\r\n            <th>#</th>\r\n            <th>상품명</th>\r\n            <th>수량</th>\r\n            <th>변경하기</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {state.cart.map((a, i) => (\r\n            <tr key={i}>\r\n              <td>{state.cart[i].id}</td>\r\n              <td>{state.cart[i].name}</td>\r\n              <td>{state.cart[i].count}</td>\r\n              <td>안녕</td>\r\n              <td>\r\n                {/* 1. + 버튼을 누르면 해당 상품의 수량부분이 +1 되는 기능을 만들어옵시다. */}\r\n                {/* 근데 나중에 Cart페이지에 있는 상품들 정렬 순서같은게 바뀌거나 그럴 경우\r\n \"버튼을 누르면 옆에 있는 상품id와 동일한 상품id 가진걸 state에서 찾은 다음에 그걸 +1\"  */}\r\n                <button\r\n                  onClick={() => {\r\n                    dispatch(addCount(state.cart[i].id))// 버튼 옆의 id \r\n                  }}\r\n                >+</button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </Table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cart;\r\n"],"names":["React","_ref","ref","bsPrefix","className","striped","bordered","borderless","hover","size","variant","responsive","props","_objectWithoutProperties","_excluded","decoratedBsPrefix","useBootstrapPrefix","classes","classNames","concat","table","_jsx","_objectSpread","responsiveClass","children","state","useSelector","dispatch","useDispatch","_jsxs","user","name","age","onClick","increase","Table","cart","map","a","i","id","count","addCount"],"sourceRoot":""}